// API Configuration and Integration for BINAH
class BinahAPI {
  constructor(baseUrl = 'http://localhost:3001/api') {
    this.baseUrl = baseUrl;
    this.connected = false;
    this.localStorageKey = 'binah_topics';
  }

  async checkConnection() {
    try {
      const response = await fetch(`${this.baseUrl}/health`);
      const data = await response.json();
      this.connected = data.ok;
      return this.connected;
    } catch (error) {
      console.warn('API n√£o dispon√≠vel, usando modo local:', error.message);
      this.connected = false;
      return false;
    }
  }

  async initDatabase() {
    try {
      const response = await fetch(`${this.baseUrl}/init`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      return await response.json();
    } catch (error) {
      console.error('Erro ao inicializar banco:', error);
      return { success: false, error: error.message };
    }
  }

  async getTopics(options = {}) {
    try {
      if (this.connected) {
        const params = new URLSearchParams();
        if (options.search) params.append('search', options.search);
        if (options.category) params.append('category', options.category);
        if (options.limit) params.append('limit', options.limit);

        const response = await fetch(`${this.baseUrl}/topics?${params}`, {
          timeout: 5000
        });
        if (!response.ok) {
          console.warn(`API retornou ${response.status}, usando localStorage`);
          throw new Error(`API Error: ${response.status}`);
        }
        const data = await response.json();
        console.log('üåê Dados da API:', data.length, 't√≥picos');
        return data;
      } else {
        return this.getTopicsFromLocalStorage(options);
      }
    } catch (error) {
      console.warn('API falhou, usando modo offline:', error.message);
      this.connected = false; // Desabilita tentativas futuras
      return this.getTopicsFromLocalStorage(options);
    }
  }

  async getTopic(id) {
    try {
      if (this.connected) {
        const response = await fetch(`${this.baseUrl}/topics/${id}`, {
          timeout: 5000
        });
        if (!response.ok) {
          console.warn(`API getTopic falhou (${response.status}), usando localStorage`);
          throw new Error(`API Error: ${response.status}`);
        }
        return await response.json();
      } else {
        const topics = this.getTopicsFromLocalStorage();
        return topics.find(t => t.id == id);
      }
    } catch (error) {
      console.warn('getTopic API falhou, usando modo offline:', error.message);
      this.connected = false; // Desabilita tentativas futuras
      const topics = this.getTopicsFromLocalStorage();
      return topics.find(t => t.id == id);
    }
  }

  async createTopic(topic) {
    try {
      if (this.connected) {
        const response = await fetch(`${this.baseUrl}/topics`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(topic)
        });
        
        if (!response.ok) throw new Error('Falha ao criar t√≥pico');
        const result = await response.json();
        
        // Sync with local storage
        const topics = this.getTopicsFromLocalStorage();
        const newTopic = { ...topic, id: result.id, date: new Date().toISOString().split('T')[0] };
        topics.unshift(newTopic);
        this.saveToLocalStorage(topics);
        
        return result;
      } else {
        return this.createTopicInLocalStorage(topic);
      }
    } catch (error) {
      console.error('Erro ao criar t√≥pico:', error);
      return this.createTopicInLocalStorage(topic);
    }
  }

  async updateTopic(id, updates) {
    try {
      if (this.connected) {
        const response = await fetch(`${this.baseUrl}/topics/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(updates)
        });
        
        if (!response.ok) throw new Error('Falha ao atualizar t√≥pico');
        const result = await response.json();
        
        // Sync with local storage
        const topics = this.getTopicsFromLocalStorage();
        const index = topics.findIndex(t => t.id == id);
        if (index !== -1) {
          if (updates.incrementView) {
            topics[index].views = (topics[index].views || 0) + 1;
          } else if (updates.incrementHelpful) {
            topics[index].helpful = (topics[index].helpful || 0) + 1;
          } else {
            topics[index] = { ...topics[index], ...updates };
          }
          this.saveToLocalStorage(topics);
        }
        
        return result;
      } else {
        return this.updateTopicInLocalStorage(id, updates);
      }
    } catch (error) {
      console.error('Erro ao atualizar t√≥pico:', error);
      return this.updateTopicInLocalStorage(id, updates);
    }
  }

  async deleteTopic(id) {
    try {
      if (this.connected) {
        const response = await fetch(`${this.baseUrl}/topics/${id}`, {
          method: 'DELETE'
        });
        
        if (!response.ok) throw new Error('Falha ao deletar t√≥pico');
        const result = await response.json();
        
        // Sync with local storage
        const topics = this.getTopicsFromLocalStorage();
        const filtered = topics.filter(t => t.id != id);
        this.saveToLocalStorage(filtered);
        
        return result;
      } else {
        return this.deleteTopicFromLocalStorage(id);
      }
    } catch (error) {
      console.error('Erro ao deletar t√≥pico:', error);
      return this.deleteTopicFromLocalStorage(id);
    }
  }

  async getCategoryStats() {
    try {
      if (this.connected) {
        const response = await fetch(`${this.baseUrl}/stats/categories`);
        if (!response.ok) throw new Error('Falha ao buscar estat√≠sticas');
        return await response.json();
      } else {
        return this.getCategoryStatsFromLocalStorage();
      }
    } catch (error) {
      console.error('Erro ao buscar estat√≠sticas:', error);
      return this.getCategoryStatsFromLocalStorage();
    }
  }

  // Local Storage Methods
  getTopicsFromLocalStorage(options = {}) {
    // Verificar se existem dados salvos
    const stored = localStorage.getItem(this.localStorageKey);
    let topics = [];
    
    if (stored) {
      try {
        topics = JSON.parse(stored);
        console.log('üìÇ Carregando t√≥picos salvos do localStorage:', topics.length);
      } catch (error) {
        console.error('‚ùå Erro ao parsear localStorage:', error);
        topics = this.getDefaultTopics();
      }
    } else {
      // Se n√£o h√° dados salvos, usar t√≥picos padr√£o e salvar
      topics = this.getDefaultTopics();
      this.saveToLocalStorage(topics);
      console.log('üîÑ Primeira execu√ß√£o - salvando t√≥picos padr√£o');
    }
    
    console.log('üìÇ Total de t√≥picos carregados:', topics.length);
    console.log('üìã Categorias dispon√≠veis:', [...new Set(topics.map(t => t.category))]);
    
    // Apply filters without modifying original array
    let filteredTopics = [...topics];
    
    if (options.search) {
      const search = options.search.toLowerCase().trim();
      console.log('üîç Buscando por:', search);
      filteredTopics = filteredTopics.filter(topic => {
        const titleMatch = topic.title.toLowerCase().includes(search);
        const contentMatch = topic.content.toLowerCase().includes(search);
        const categoryMatch = topic.category.toLowerCase().includes(search);
        const keywordMatch = topic.keywords && topic.keywords.some(k => 
          k.toLowerCase().includes(search)
        );
        return titleMatch || contentMatch || categoryMatch || keywordMatch;
      });
      console.log('üéØ Resultados da busca por texto:', filteredTopics.length);
    }
    
    if (options.category && options.category !== 'all') {
      console.log('üîç Filtrando por categoria:', options.category);
      console.log('üìÇ T√≥picos antes do filtro:', filteredTopics.length);
      const beforeFilter = filteredTopics.length;
      filteredTopics = filteredTopics.filter(topic => {
        console.log(`Comparando: "${topic.category}" === "${options.category}"`, topic.category === options.category);
        return topic.category === options.category;
      });
      console.log('‚úÖ T√≥picos ap√≥s filtro por categoria:', filteredTopics.length);
      if (beforeFilter > 0 && filteredTopics.length === 0) {
        console.warn('‚ö†Ô∏è Nenhum t√≥pico encontrado para categoria:', options.category);
      }
    }
    
    if (options.limit) {
      filteredTopics = filteredTopics.slice(0, parseInt(options.limit));
    }
    
    return filteredTopics;
  }

  createTopicInLocalStorage(topic) {
    // Carregar TODOS os t√≥picos existentes (salvos + padr√£o)
    const allTopics = this.getTopicsFromLocalStorage();
    const newId = Math.max(...allTopics.map(t => t.id), 0) + 1;
    
    const newTopic = {
      ...topic,
      id: newId,
      date: new Date().toISOString().split('T')[0],
      views: 0,
      helpful: 0,
      preview: topic.content.replace(/<[^>]*>/g, '').substring(0, 200) + '...'
    };
    
    // Adicionar o novo t√≥pico no in√≠cio da lista
    allTopics.unshift(newTopic);
    
    // Salvar TODA a lista atualizada
    this.saveToLocalStorage(allTopics);
    
    console.log('‚úÖ Novo t√≥pico criado com ID:', newId);
    console.log('üìä Total de t√≥picos ap√≥s cria√ß√£o:', allTopics.length);
    
    return { success: true, id: newId };
  }

  updateTopicInLocalStorage(id, updates) {
    const topics = this.getTopicsFromLocalStorage();
    const index = topics.findIndex(t => t.id == id);
    
    if (index === -1) {
      return { success: false, error: 'T√≥pico n√£o encontrado' };
    }
    
    if (updates.incrementView) {
      topics[index].views = (topics[index].views || 0) + 1;
    } else if (updates.incrementHelpful) {
      topics[index].helpful = (topics[index].helpful || 0) + 1;
    } else {
      topics[index] = { ...topics[index], ...updates };
      if (updates.content) {
        topics[index].preview = updates.content.replace(/<[^>]*>/g, '').substring(0, 200) + '...';
      }
    }
    
    this.saveToLocalStorage(topics);
    return { success: true };
  }

  deleteTopicFromLocalStorage(id) {
    const topics = this.getTopicsFromLocalStorage();
    const filtered = topics.filter(t => t.id != id);
    this.saveToLocalStorage(filtered);
    return { success: true };
  }

  getCategoryStatsFromLocalStorage() {
    const topics = this.getTopicsFromLocalStorage();
    const stats = {};
    
    topics.forEach(topic => {
      stats[topic.category] = (stats[topic.category] || 0) + 1;
    });
    
    return Object.entries(stats).map(([category, count]) => ({ category, count }));
  }

  saveToLocalStorage(topics) {
    try {
      localStorage.setItem(this.localStorageKey, JSON.stringify(topics));
      console.log('‚úÖ T√≥picos salvos no localStorage:', topics.length, 'items');
      console.log('üìã Categorias salvas:', [...new Set(topics.map(t => t.category))]);
    } catch (error) {
      console.error('‚ùå Erro ao salvar no localStorage:', error);
    }
  }

  getDefaultTopics() {
    return [
      {
        id: 1,
        title: "Como Configurar uma Nova Dosadora Autom√°tica",
        category: "Dosadoras",
        keywords: ["dosadora", "configura√ß√£o", "autom√°tica", "calibra√ß√£o", "sensores", "par√¢metros", "dosagem", "volume"],
        preview: "Guia completo para configura√ß√£o inicial de dosadoras autom√°ticas, incluindo calibra√ß√£o de sensores e configura√ß√£o de par√¢metros...",
        content: `
          <h3>Configura√ß√£o Inicial</h3>
          <p>Para configurar uma nova dosadora autom√°tica, siga estes passos:</p>
          <ul>
            <li><strong>Verifica√ß√£o de Componentes:</strong> Confira se todos os sensores est√£o conectados</li>
            <li><strong>Calibra√ß√£o de Sensores:</strong> Execute o procedimento de calibra√ß√£o autom√°tica</li>
            <li><strong>Configura√ß√£o de Par√¢metros:</strong> Defina os valores de dosagem conforme especifica√ß√£o</li>
            <li><strong>Teste de Funcionamento:</strong> Execute um ciclo de teste completo</li>
          </ul>
          
          <h3>Par√¢metros Importantes</h3>
          <ul>
            <li>Volume de dosagem: 50ml a 500ml</li>
            <li>Precis√£o: ¬±2%</li>
            <li>Tempo de ciclo: 30-180 segundos</li>
          </ul>
          
          <h3>Solu√ß√£o de Problemas</h3>
          <p>Se a dosadora n√£o responder, verifique:</p>
          <ul>
            <li>Conex√µes el√©tricas</li>
            <li>Press√£o de ar comprimido (m√≠n. 6 bar)</li>
            <li>Calibra√ß√£o dos sensores</li>
          </ul>
        `,
        author: "Jo√£o Silva",
        date: "2024-01-15",
        views: 45,
        helpful: 12
      },
      {
        id: 2,
        title: "Erro E001: Falha na Comunica√ß√£o com Sensor",
        category: "Erros",
        keywords: ["erro", "E001", "sensor", "comunica√ß√£o", "troubleshooting", "falha", "conex√£o", "cabo", "reset"],
        preview: "Solu√ß√£o para o erro E001 que indica falha na comunica√ß√£o com sensores do sistema...",
        content: `
          <h3>Descri√ß√£o do Erro</h3>
          <p>O erro E001 indica que o sistema n√£o consegue se comunicar com um ou mais sensores.</p>
          
          <h3>Poss√≠veis Causas</h3>
          <ul>
            <li>Cabo de comunica√ß√£o desconectado</li>
            <li>Sensor com defeito</li>
            <li>Interfer√™ncia eletromagn√©tica</li>
            <li>Configura√ß√£o incorreta de endere√ßo</li>
          </ul>
          
          <h3>Solu√ß√£o Passo a Passo</h3>
          <ol>
            <li><strong>Verificar Conex√µes:</strong> Confira todos os cabos de comunica√ß√£o</li>
            <li><strong>Reiniciar Sistema:</strong> Execute um reset completo do sistema</li>
            <li><strong>Verificar Endere√ßos:</strong> Confirme se os endere√ßos dos sensores est√£o corretos</li>
            <li><strong>Testar Sensores:</strong> Execute teste individual de cada sensor</li>
            <li><strong>Substituir se Necess√°rio:</strong> Troque sensores defeituosos</li>
          </ol>
          
          <h3>Preven√ß√£o</h3>
          <p>Para evitar este erro:</p>
          <ul>
            <li>Mantenha cabos protegidos de interfer√™ncias</li>
            <li>Execute manuten√ß√£o preventiva mensalmente</li>
            <li>Monitore a integridade das conex√µes</li>
          </ul>
        `,
        author: "Maria Santos",
        date: "2024-01-10",
        views: 78,
        helpful: 25
      },
      {
        id: 3,
        title: "Manuten√ß√£o Preventiva Semanal - Checklist Completo",
        category: "Manuten√ß√£o",
        keywords: ["manuten√ß√£o", "preventiva", "checklist", "semanal", "inspe√ß√£o"],
        preview: "Lista completa de verifica√ß√µes para manuten√ß√£o preventiva semanal do sistema de dosagem...",
        content: `
          <h3>Checklist de Manuten√ß√£o Semanal</h3>
          
          <h3>Inspe√ß√£o Visual</h3>
          <ul>
            <li>‚òê Verificar vazamentos em conex√µes</li>
            <li>‚òê Inspecionar estado dos cabos el√©tricos</li>
            <li>‚òê Verificar fixa√ß√£o de componentes</li>
            <li>‚òê Limpar pain√©is e displays</li>
          </ul>
          
          <h3>Testes Funcionais</h3>
          <ul>
            <li>‚òê Testar todas as v√°lvulas</li>
            <li>‚òê Verificar precis√£o das dosagens</li>
            <li>‚òê Testar sistemas de emerg√™ncia</li>
            <li>‚òê Validar alarmes e indicadores</li>
          </ul>
          
          <h3>Limpeza e Lubrifica√ß√£o</h3>
          <ul>
            <li>‚òê Limpar filtros de ar</li>
            <li>‚òê Lubrificar pontos de articula√ß√£o</li>
            <li>‚òê Limpar sensores</li>
            <li>‚òê Drenar condensado do sistema pneum√°tico</li>
          </ul>
          
          <h3>Registros</h3>
          <p>Documentar todos os itens verificados e anotar observa√ß√µes relevantes no livro de manuten√ß√£o.</p>
          
          <h3>Frequ√™ncia de Itens Espec√≠ficos</h3>
          <ul>
            <li><strong>Di√°rio:</strong> Verifica√ß√£o visual geral</li>
            <li><strong>Semanal:</strong> Checklist completo acima</li>
            <li><strong>Mensal:</strong> Calibra√ß√£o de precis√£o</li>
            <li><strong>Trimestral:</strong> Manuten√ß√£o preventiva completa</li>
          </ul>
        `,
        author: "Carlos Oliveira",
        date: "2024-01-08",
        views: 92,
        helpful: 31
      },
      {
        id: 4,
        title: "Calibra√ß√£o da M√°quina de Corte CNC",
        category: "M√°quinas",
        keywords: ["m√°quina", "CNC", "corte", "calibra√ß√£o", "precis√£o"],
        preview: "Procedimento completo para calibra√ß√£o de m√°quinas CNC de corte para garantir m√°xima precis√£o...",
        content: `
          <h3>Prepara√ß√£o</h3>
          <p>Antes de iniciar a calibra√ß√£o:</p>
          <ul>
            <li>Desligue a m√°quina completamente</li>
            <li>Verifique se a √°rea est√° limpa</li>
            <li>Tenha as ferramentas necess√°rias em m√£os</li>
          </ul>
          
          <h3>Processo de Calibra√ß√£o</h3>
          <ol>
            <li>Ligue a m√°quina e acesse o menu de calibra√ß√£o</li>
            <li>Execute o auto-nivelamento</li>
            <li>Calibre os eixos X, Y e Z</li>
            <li>Teste com um corte de exemplo</li>
          </ol>
        `,
        author: "Ana Costa",
        date: "2024-01-12",
        views: 67,
        helpful: 18
      },
      {
        id: 5,
        title: "Procedimento de Seguran√ßa na Opera√ß√£o",
        category: "Procedimentos",
        keywords: ["seguran√ßa", "opera√ß√£o", "EPI", "procedimento", "normas"],
        preview: "Normas e procedimentos essenciais de seguran√ßa para opera√ß√£o de equipamentos industriais...",
        content: `
          <h3>EPIs Obrigat√≥rios</h3>
          <ul>
            <li>Capacete de seguran√ßa</li>
            <li>√ìculos de prote√ß√£o</li>
            <li>Luvas adequadas ao tipo de trabalho</li>
            <li>Cal√ßado de seguran√ßa</li>
          </ul>
          
          <h3>Antes de Operar</h3>
          <ol>
            <li>Verifique se todos os EPIs est√£o em bom estado</li>
            <li>Inspecione o equipamento</li>
            <li>Confirme que a √°rea est√° liberada</li>
            <li>Teste os sistemas de emerg√™ncia</li>
          </ol>
        `,
        author: "Roberto Santos",
        date: "2024-01-05",
        views: 134,
        helpful: 42
      },
      {
        id: 6,
        title: "Dosadora Modelo X-100 - Manual Completo",
        category: "Dosadoras",
        keywords: ["dosadora", "X-100", "manual", "opera√ß√£o", "especifica√ß√µes", "instala√ß√£o"],
        preview: "Manual completo de opera√ß√£o da dosadora modelo X-100, incluindo instala√ß√£o, configura√ß√£o e solu√ß√£o de problemas...",
        content: `
          <h3>Especifica√ß√µes T√©cnicas</h3>
          <ul>
            <li>Capacidade: 10-1000ml por dose</li>
            <li>Precis√£o: ¬±1%</li>
            <li>Velocidade: at√© 60 doses/min</li>
            <li>Press√£o de trabalho: 6-8 bar</li>
          </ul>
          <h3>Instala√ß√£o</h3>
          <p>Conecte a linha de ar comprimido e verifique a press√£o antes da primeira opera√ß√£o.</p>
        `,
        author: "Tech Team",
        date: "2024-01-20",
        views: 89,
        helpful: 24
      },
      {
        id: 7,
        title: "Erro E002: Sobrecarga do Motor",
        category: "Erros", 
        keywords: ["erro", "E002", "motor", "sobrecarga", "corrente", "prote√ß√£o", "reset"],
        preview: "Como resolver o erro E002 de sobrecarga do motor principal do sistema...",
        content: `
          <h3>Causa do Problema</h3>
          <p>O erro E002 indica que o motor est√° consumindo mais corrente que o permitido.</p>
          <h3>Solu√ß√µes</h3>
          <ol>
            <li>Desligue o equipamento imediatamente</li>
            <li>Verifique se h√° obstru√ß√µes mec√¢nicas</li>
            <li>Aguarde 5 minutos para resfriamento</li>
            <li>Reinicie o sistema</li>
          </ol>
        `,
        author: "Suporte T√©cnico",
        date: "2024-01-18",
        views: 156,
        helpful: 67
      },
      {
        id: 8,
        title: "Manuten√ß√£o da Linha de Produ√ß√£o",
        category: "Manuten√ß√£o",
        keywords: ["manuten√ß√£o", "linha", "produ√ß√£o", "preventiva", "lubrifica√ß√£o", "limpeza"],
        preview: "Rotina completa de manuten√ß√£o para linhas de produ√ß√£o automatizadas...",
        content: `
          <h3>Manuten√ß√£o Di√°ria</h3>
          <ul>
            <li>Inspe√ß√£o visual geral</li>
            <li>Verifica√ß√£o de alarmes</li>
            <li>Limpeza superficial</li>
          </ul>
          <h3>Manuten√ß√£o Semanal</h3>
          <ul>
            <li>Lubrifica√ß√£o de pontos espec√≠ficos</li>
            <li>Teste de emerg√™ncia</li>
            <li>Calibra√ß√£o b√°sica</li>
          </ul>
        `,
        author: "Equipe Manuten√ß√£o",
        date: "2024-01-14",
        views: 203,
        helpful: 85
      },
      {
        id: 9,
        title: "Opera√ß√£o da Fresadora CNC Modelo F-200",
        category: "M√°quinas",
        keywords: ["fresadora", "CNC", "F-200", "opera√ß√£o", "programa√ß√£o", "ferramentas"],
        preview: "Guia de opera√ß√£o para fresadora CNC F-200, incluindo programa√ß√£o b√°sica e troca de ferramentas...",
        content: `
          <h3>Prepara√ß√£o da M√°quina</h3>
          <ol>
            <li>Ligue o sistema de refrigera√ß√£o</li>
            <li>Verifique o n√≠vel de √≥leo</li>
            <li>Instale a ferramenta adequada</li>
            <li>Configure as coordenadas de trabalho</li>
          </ol>
          <h3>Programa√ß√£o B√°sica</h3>
          <p>Use c√≥digos G padr√£o para movimenta√ß√£o e usinagem.</p>
        `,
        author: "Operador S√™nior",
        date: "2024-01-16",
        views: 78,
        helpful: 34
      },
      {
        id: 10,
        title: "Procedimento de Parada de Emerg√™ncia",
        category: "Procedimentos",
        keywords: ["emerg√™ncia", "parada", "seguran√ßa", "procedimento", "evacua√ß√£o", "protocolo"],
        preview: "Protocolo completo para situa√ß√µes de emerg√™ncia e parada de sistemas industriais...",
        content: `
          <h3>A√ß√µes Imediatas</h3>
          <ol>
            <li>Acionar bot√£o de emerg√™ncia</li>
            <li>Desligar alimenta√ß√£o el√©trica</li>
            <li>Evacuar √°rea se necess√°rio</li>
            <li>Comunicar respons√°veis</li>
          </ol>
          <h3>Ap√≥s a Emerg√™ncia</h3>
          <p>N√£o reiniciar equipamentos sem autoriza√ß√£o do respons√°vel t√©cnico.</p>
        `,
        author: "Seguran√ßa do Trabalho",
        date: "2024-01-03",
        views: 298,
        helpful: 156
      }
    ];
  }
}

// Initialize API instance
window.binahAPI = new BinahAPI();

// Auto-check connection on load
document.addEventListener('DOMContentLoaded', async () => {
  // Only reset if no data exists
  const existingData = localStorage.getItem('binah_topics');
  if (!existingData) {
    console.log('üîÑ Primeira execu√ß√£o - carregando t√≥picos padr√£o...');
  } else {
    console.log('üìÇ Carregando dados salvos existentes...');
  }
  
  const connected = await window.binahAPI.checkConnection();
  if (connected) {
    await window.binahAPI.initDatabase();
    console.log('‚úÖ BINAH API conectada com sucesso');
  } else {
    console.log('‚ö†Ô∏è BINAH rodando em modo local (offline)');
  }
  
  // Test categories
  console.log('üß™ Testando categorias...');
  const categories = ['M√°quinas', 'Dosadoras', 'Manuten√ß√£o', 'Erros', 'Procedimentos'];
  for (const cat of categories) {
    const results = await window.binahAPI.getTopics({ category: cat });
    console.log(`üìä ${cat}: ${results.length} t√≥picos`);
  }
});